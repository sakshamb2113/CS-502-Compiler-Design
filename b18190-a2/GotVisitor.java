//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GotVisitor extends GJNoArguDepthFirst<Integer> {

    Map<String, Integer> counts = new HashMap<>();
    Map<String, Integer > lifespans = new HashMap<>();
    Map<String, String > houses = new HashMap<>();

    
    // User-generated visitor methods below
    //

    /**
     * f0 -> ( Housedeclarations() )*
     * f1 -> ( facts() )*
     * f3 -> <EOF>
     */


    public Integer visit(Goal n) {
        Integer _ret=null;
        counts.put("Lannister", 0);
        counts.put("Baratheon", 0);
        counts.put("Stark", 0);
        counts.put("Greyjoy", 0);
        counts.put("Targaryen", 0);
        counts.put("Tyrell", 0);
        
        n.f0.accept(this);
        n.f1.accept(this);

        // System.out.println("Hello");


        Integer cnt=0;
        for (Map.Entry<String,Integer> entry : lifespans.entrySet()) {
            if(entry.getValue() <= 0){
                cnt++;
            }
        }
        System.out.println(cnt);
        Vector<String> maxhouse = new Vector<String>(); 
        Integer mx=0;
        for(Map.Entry<String,Integer> entry : counts.entrySet()){
            mx=Math.max(mx, entry.getValue());
        }
        for(Map.Entry<String,Integer> entry : counts.entrySet()){
            // System.out.print(entry.getKey()+":"+entry.getValue()+" ");
            if(entry.getValue()==mx){
                maxhouse.add(entry.getKey());
            }
        }

        Collections.sort(maxhouse);  
        Iterator valuu = maxhouse.iterator();
        
        while (valuu.hasNext()) { 
            System.out.print(valuu.next() + " ");
        } 

        System.out.print("\n");

        mx=0;
        Vector<String> rulers = new Vector<String>();
        for(Map.Entry<String,Integer> entry : lifespans.entrySet()){
            // System.out.print(entry.getKey()+":"+entry.getValue()+" ");
            mx=Math.max(mx, entry.getValue());
        }

        for(Map.Entry<String,Integer> entry : lifespans.entrySet()){
            if(entry.getValue()==mx){
                rulers.add(entry.getKey());
            }
        }

        Collections.sort(rulers);  

        Iterator value = rulers.iterator();
        
        while (value.hasNext()) { 
            System.out.print(value.next() + " ");
        } 
        System.out.print("\n");

        n.f2.accept(this);
        return _ret;
    }

    
    /**
     * f0 -> house_name()
     * f1 -> character_name()
     * f2 -> ;
     */
    public Integer visit(Housedeclarations n) {
        Integer _ret=null;
        String house = n.f0.tokenImage;
        String chara = n.f1.tokenImage;
        counts.put(house, counts.get(house)+1);
        houses.put(chara, house);
        lifespans.put(chara, 10);

        return _ret;
    }

    
    /**
     * f0 -> character_name()
     * f1-> operator()
     * f2-> character_name()
     */
    public Integer visit(facts n) {
        Integer _ret=null;
        String char1 = n.f0.tokenImage;
        String char2 = n.f1.tokenImage;
        String char3 = n.f2.tokenImage;
        // System.out.print(char1 + " " + char2 + " " + char3 + "\n");
        if(char2==">p"){
            String house = houses.get(char3);
            // System.out.println(house);
            for (Map.Entry<String,Integer> entry : lifespans.entrySet()) {
                String val = entry.getKey();
                if(houses.get(val) == house){
                    // System.out.print(entry.getValue()+" ");
                    entry.setValue(entry.getValue() - 10);
                    if(entry.getValue()<=0 && entry.getValue()+10>0){
                        counts.put(house, counts.get(house)-1);
                    }
                    // System.out.println(entry.getValue());
                }
            }
        }
        else if(char2 == "<p"){
            String house = houses.get(char1);

            for (Map.Entry<String,Integer> entry : lifespans.entrySet()) {
                String val = entry.getKey();
                if(houses.get(val) == house){
                    entry.setValue(entry.getValue() - 10);
                    if(entry.getValue()<=0 && entry.getValue()+10>0){
                        counts.put(house, counts.get(house)-1);
                    }
                }
            }
        }
        else if(char2 == ">k"){

            lifespans.put(char1,lifespans.get(char1)+5);
            if(lifespans.get(char1)>0 && lifespans.get(char1)-5<=0){
                String house = houses.get(char1);
                counts.put(house, counts.get(house)+1);
            }
            lifespans.put(char3,lifespans.get(char3)-5);
            if(lifespans.get(char3)+5>0 && lifespans.get(char3)<=0){
                String house = houses.get(char3);            
                counts.put(house, counts.get(house)-1);
            }
        }
        else if(char2 == "<k"){
            lifespans.put(char3,lifespans.get(char3)+5);
            if(lifespans.get(char3)>0 && lifespans.get(char3)-5<=0){
                String house = houses.get(char3);
                counts.put(house, counts.get(house)+1);
            }
            lifespans.put(char1,lifespans.get(char1)-5);
            if(lifespans.get(char1)+5>0 && lifespans.get(char1)<=0){
                String house = houses.get(char1);            
                counts.put(house, counts.get(house)-1);
            }            
        }

        return _ret;
    }
}
