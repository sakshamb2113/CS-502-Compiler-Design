//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(CalcExpr)
import syntaxtree.*;
import java.util.Vector;


public class CalcExpr 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CalcExpr)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <HOUSE_NAME: "Lannister" | "Baratheon" | "Greyjoy" | "Stark" | "Targaryen" | "Tyrell">
   | <NAME: (["A"-"Z", "a"-"z"]) (["A"-"Z", "a"-"z"] | ["0"-"9"])*>
   | <OPERATOR: "<p" | ">p" | "<k" | ">k" | "=p" | "=k">
}

Goal Goal() :
{
   NodeListOptional n0 = new NodeListOptional();
   Housedeclarations n1;
   NodeListOptional n2 = new NodeListOptional();
   facts n3;
   NodeToken n4;
   Token n5;

   
}
{
   (
      n1=Housedeclarations()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   (
      n3=facts()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5=<EOF> { 
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
   }
   
   { return new Goal(n0,n2,n4); }
}

Housedeclarations Housedeclarations() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<HOUSE_NAME> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<NAME> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Housedeclarations(n0,n2,n4); }
}

facts facts() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<NAME> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<OPERATOR> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<NAME> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=";" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new facts(n0,n2,n4,n6); }
}
