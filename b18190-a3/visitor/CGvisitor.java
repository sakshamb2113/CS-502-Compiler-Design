//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class CGvisitor extends GJDepthFirst<String,Integer> {

   //
   // User-generated visitor methods below
   //

   String code="";
   Integer TmpNum=0;
   Stack<Integer> stack = new Stack<Integer>();
   Integer while_flag=0;
   Map<String, String> ST = new HashMap<String, String>();
   Map<String, String> return_value = new HashMap<String, String>();
   Integer it_no=0;
   String tmp_string="";

   public String newTmp() {
      String temp = "";
      if(it_no==1) {
         if (while_flag == 1) {
            temp = "tmp" + (stack.peek()).toString();
            stack.pop();
         } else if (while_flag == 2) {
            stack.push(TmpNum);
            temp = "tmp" + (TmpNum++);
         } else {
            temp = "tmp" + (TmpNum++);
         }
      }
      return temp;
   }

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      it_no++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      System.out.println(code);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public String visit(MainClass n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f1.accept(this, argu);
      String tmp2 = (String) n.f11.accept(this, argu);
      if(it_no==1)
      code += "class " + tmp1 + " {\n" + "public static void main(String[] " + tmp2 + ") {\n";
      Integer idx = code.length();
      n.f14.accept(this, argu);
      Vector<String> v = new Vector<String>();
      String temp = "";

      for (Map.Entry<String, String> entry : ST.entrySet())
      {
         String key = entry.getKey();
         String value = entry.getValue();
         temp += value + " " + key + ";\n";
         v.add(key);
         //use key and value
      }

      if(it_no==1)
      code = code.substring(0,idx)+temp+code.substring(idx,code.length());

      for (int i = 0; i < v.size(); i++)
         ST.remove(v.get(i));
      
      if(it_no==1)
      code += "}\n}\n";
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n, Integer argu) {
      String _ret=null;
      String klassname = (String) n.f1.accept(this, argu);
      return_value.put("class_name", klassname);
      if(it_no==1)
      code += "class " + klassname + " {\n";
      n.f3.accept(this, argu);

      Integer idx = code.length();
      n.f4.accept(this, argu);

      Vector<String> v = new Vector<String>();
      String temp = "";
      for (Map.Entry<String, String> entry : ST.entrySet())
      {
         String key = entry.getKey();
         String value = entry.getValue();
         temp += value + " " + key + ";\n";
         v.add(key);
      }
      if(it_no==1)
      code = code.substring(0,idx)+temp+code.substring(idx,code.length());

      for (int i = 0; i < v.size(); i++)
         ST.remove(v.get(i));
      
      if(it_no==1)
      code += "}\n";

      return_value.remove("class_name");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n, Integer argu) {
      String _ret=null;
      String klassname = (String) n.f1.accept(this, argu);
      String parentklass = (String) n.f3.accept(this, argu);
      return_value.put("class_name", klassname);
      if(it_no==1)
      code += "class " + klassname + " extends " + parentklass + "{\n";
      n.f5.accept(this, argu);
      Integer idx = code.length();
      n.f6.accept(this, argu);


      Vector<String> v = new Vector<String>();
      String temp = "";

      for (Map.Entry<String, String> entry : ST.entrySet())
      {
         String key = entry.getKey();
         String value = entry.getValue();
         temp += value + " " + key + ";\n";
         v.add(key);
         //use key and value
      }

      if(it_no==1)
      code = code.substring(0,idx)+temp+code.substring(idx,code.length());

      for (int i = 0; i < v.size(); i++)
         ST.remove(v.get(i));                                             

      if(it_no==1)
      code += "}\n";
      return_value.remove("class_name");
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n, Integer argu) {
      String _ret=null;
      String tmp1 = n.f0.accept(this, argu);
      String tmp2 = n.f1.accept(this, argu);
      if(it_no==1)
      code += tmp1 + " " + tmp2 + ";\n";
      _ret = tmp2;
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n, Integer argu) {
      String _ret=null;
      String tmp1 = n.f1.accept(this, argu);
      String tmp2 = n.f2.accept(this, argu);
      tmp_string = "";
      String tmp4 = n.f4.accept(this, argu);
      return_value.put(tmp2,tmp1);

      if(tmp_string.length()!=0) {
         if(it_no==1)
         code += "public " + tmp1 + " " + tmp2 + "(" + tmp_string + ") {\n";
      }
      else{
         if(it_no==1)
         code += "public " + tmp1 + " " + tmp2 + "() {\n" ;
      }
      tmp_string="";
      n.f7.accept(this, argu);
      Integer idx = code.length();
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String tmp10 = n.f10.accept(this, argu);
      Vector<String> v = new Vector<String>();
      String temp = "";
      for (Map.Entry<String, String> entry : ST.entrySet())
      {
         String key = entry.getKey();
         String value = entry.getValue();
         temp += value + " " + key + ";\n";
         v.add(key);
      }
      if(it_no==1)
      code = code.substring(0,idx)+temp+code.substring(idx,code.length());
      for (int i = 0; i < v.size(); i++)
         ST.remove(v.get(i));

      if(it_no==1)
      code += "return " + tmp10 + ";\n}\n";
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n, Integer argu) {
      String _ret=null;
      String tmp1 = n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n, Integer argu) {
      String _ret=null;
      String tpe = n.f0.accept(this, argu);
      String id = n.f1.accept(this, argu);
      tmp_string += tpe + " " + id;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n, Integer argu) {
      String _ret=null;
      tmp_string += ", ";

      String tmp1 = n.f1.accept(this, argu);
      _ret = ", "+ tmp1;
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public String visit(Type n, Integer argu) {
      String _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n, Integer argu) {
      String _ret=null;
      _ret = "int[]";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n, Integer argu) {
      String _ret=null;
      _ret = "boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n, Integer argu) {
      String _ret=null;
      _ret = "int";
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public String visit(Statement n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      if(it_no==1)
      code += tmp1 + " = " + tmp2 + ";\n";
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public String visit(ArrayAssignmentStatement n, Integer argu) {
      String _ret=null;
      String tmp0 = n.f0.accept(this, argu);
      String tmp2 = n.f2.accept(this, argu);
      String tmp5 = n.f5.accept(this, argu);
      if(it_no==1)
      code += tmp0 + "[" + tmp2 + "] = " + tmp5 + ";\n";
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    */
   public String visit(FieldAssignmentStatement n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      String tmp3 = (String) n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfStatement n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f2.accept(this, argu);
      if(it_no==1)
      code += "if (" + tmp1 + ") {\n";
      n.f4.accept(this, argu);
      if(it_no==1)
      code += "} else {\n";
      n.f6.accept(this, argu);
      if(it_no==1)
      code += "}\n";
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n, Integer argu) {
      String _ret=null;
      while_flag=2;
      String tmp2 = n.f2.accept(this, argu);
      while_flag=0;
      if(it_no==1)
      code += "while(" + tmp2 + ") {\n{\n";
      n.f4.accept(this, argu);
      if(it_no==1)
      code += "}\n";
      while_flag=1;
      n.f2.accept(this, argu);
      while_flag=0;
      if(it_no==1)
      code += "}\n";
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f2.accept(this, argu);
      if(it_no==1)
      code += "System.out.println(" + tmp1 + ");\n";
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public String visit(Expression n, Integer argu) {
      String _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public String visit(AndExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = " + tmp1 + " && " + tmp2 + ";\n";
      ST.put(rTmp, "boolean");
      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public String visit(OrExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = " + tmp1 + " || " + tmp2 + ";\n";
      ST.put(rTmp, "boolean");
      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public String visit(CompareExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = " + tmp1 + " < " + tmp2 + ";\n";
      ST.put(rTmp,"boolean");
      _ret = (String) rTmp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public String visit(neqExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = " + tmp1 + " != " + tmp2 + ";\n";
      ST.put(rTmp,"boolean");
      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public String visit(PlusExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = " + tmp1 + " + " + tmp2 + ";\n";
      ST.put(rTmp,"int");
      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public String visit(MinusExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      String rTmp = newTmp();

      if(it_no==1)
      code += rTmp + " = " + tmp1 + " - " + tmp2 + ";\n";
      ST.put(rTmp,"int");
      _ret = (String) rTmp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public String visit(TimesExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = " + tmp1 + " * " + tmp2 + ";\n";
      ST.put(rTmp,"int");
      _ret = rTmp;
      return rTmp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public String visit(DivExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      String tmp2 = (String) n.f2.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = " + tmp1 + " / " + tmp2 + ";\n";
      ST.put(rTmp,"int");
      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public String visit(ArrayLookup n, Integer argu) {
      String _ret=null;
      String tmp1 = n.f0.accept(this, argu);
      String tmp2 = n.f2.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = " + tmp1 + "[" + tmp2 + "];\n";
      ST.put(rTmp, "int");
      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public String visit(ArrayLength n, Integer argu) {
      String _ret=null;
      String tmp1 = n.f0.accept(this, argu);

      String rTmp = newTmp();

      if(it_no==1)
      code += rTmp + " = " + tmp1 + ".length;\n";

      ST.put(rTmp, "int");
      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n, Integer argu) {
      String _ret=null;
      String tmp1 = n.f0.accept(this, argu);
      String tmp2 = n.f2.accept(this, argu);
      String rTmp = newTmp();

      tmp_string="";
      String tmp3 = n.f4.accept(this, argu);
      if(tmp_string.length()!=0) {
         if(it_no==1)
         code += rTmp + " = " + tmp1 + "." + tmp2 + "(" + tmp_string + ");\n";
      }
      else{
         if(it_no==1)
         code += rTmp + " = " + tmp1 + "." + tmp2 + "();\n";
      }
      tmp_string="";
      ST.put(rTmp, return_value.get(tmp2));
      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public String visit(ExpressionList n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f0.accept(this, argu);
      tmp_string += tmp1;
      String temp = (String) n.f1.accept(this, argu);
      if(temp!=null){
         tmp1 += temp;
      }
      _ret = (String) tmp1;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public String visit(ExpressionRest n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      tmp_string += ", ";
      String tmp2 = n.f1.accept(this, argu);
      tmp_string += tmp2;
      _ret = ", " + tmp2;
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public String visit(PrimaryExpression n, Integer argu) {
      String _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String rTmp = newTmp();
      _ret = n.f0.tokenImage;
      if(it_no==1)
      code += rTmp + " = " + _ret + ";\n";
      ST.put(rTmp,"int");
      return (String) rTmp;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String rTmp = newTmp();
      _ret = n.f0.tokenImage;
      if(it_no==1)
      code += rTmp + " = " + _ret + ";\n";
      ST.put(rTmp, "boolean");
      return (String) rTmp;
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String rTmp = newTmp();
      _ret = n.f0.tokenImage;
      if(it_no==1)
      code += rTmp + " = " + _ret + ";\n";
      ST.put(rTmp, "boolean");
      return (String) rTmp;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String rTmp = newTmp();
      _ret = (String) n.f0.tokenImage;
      if(it_no==1)
      code += rTmp + " = " + _ret + ";\n";
      ST.put(rTmp,return_value.get("class_name"));
      
      return rTmp;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public String visit(ArrayAllocationExpression n, Integer argu) {
      String _ret=null;

      String tmp3 = n.f3.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = new int[" + tmp3 + "];\n";
      _ret = rTmp;
      ST.put(rTmp, "int[]");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = n.f1.accept(this, argu);

      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = new " + tmp1 + "();\n";
      ST.put(rTmp, tmp1);

      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public String visit(NotExpression n, Integer argu) {
      String _ret=null;
      String tmp1 = (String) n.f1.accept(this, argu);
      String rTmp = newTmp();
      if(it_no==1)
      code += rTmp + " = !" + tmp1 + ";\n";
      ST.put(rTmp,"boolean");
      _ret = rTmp;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public String visit(BracketExpression n, Integer argu) {
      String _ret=null;
      _ret = (String) n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public String visit(IdentifierList n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public String visit(IdentifierRest n, Integer argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
